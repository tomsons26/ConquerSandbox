.SILENT
.OPTIMIZE
.ERASE

LIB_DIR     = $(%BLDDIR)\WIN32LIB

#---------------------------------------------------------------------------
# Include & library paths
#	If LIB & INCLUDE are already defined, they are used in addition to the
#	WWLIB32 lib & include; otherwise, they're constructed from
#	BCDIR & TNTDIR
#---------------------------------------------------------------------------

LIBPATH	  	= $(LIB_DIR);$(%WATCOM)\LIB
INCLUDEPATH	= $(LIB_DIR)\INCLUDE;$(%WATCOM)\H\NT;$(%WATCOM)\H


#---------------------------------------------------------------------------
# Path macros: one path for each file type.
#	These paths are used to tell make where to find/put each file type.
#---------------------------------------------------------------------------
.asm:	$(PROJ_DIR)
.c:	$(PROJ_DIR)
.cpp:	$(PROJ_DIR)
.h:	$(PROJ_DIR)
.obj:	$(LIB_DIR)\OBJ
.lib:	$(LIB_DIR)
.exe:	$(LIB_DIR)

#---------------------------------------------------------------------------
# Tools/commands
#---------------------------------------------------------------------------
C_CMD	  	= wcc386
CPP_CMD	  	= wpp386
LIB_CMD	  	= wlib
LINK_CMD  	= wlink
ASM_CMD	  	= $(%UTILS)\msdos tasm


#***************************************************************************
# development configuration switches

#CC_CFG         = -bt=nt /i=$(LIB_DIR)\INCLUDE -W3 -d2 -orilt /4 -s -j -DNUMEGA=1
#CC_CFG          = -bt=nt /i=$(LIB_DIR)\INCLUDE -W3 -d2 -od /4 -s -j -DNUMEGA=1
ASM_CFG		= /i. /i$(LIB_DIR)\INCLUDE /zi /t /m /w+ /jJUMPS /ml
LIB_CFG   	= /b /n /n
LINK_CFG  	= debug codeview system nt_win option stack=64k  op map
#ASM_CFG		= /i. /i$(%LIB_DIR)\INCLUDE /zd /t /m /w+ /jJUMPS /ml
#LIB_CFG   	= /b /n /n
#LINK_CFG  	= option stack=32k debug all

#***************************************************************************
# Release configuration switches

CC_CFG   = /i=$(LIB_DIR)\INCLUDE /W3 /d1 /otxan /s /4 /j
#ASM_CFG	  = /i$(LIB_DIR)\INCLUDE /zd /t /m /w+ /jJUMPS /ml
#LIB_CFG   = /b /n /n
#LINK_CFG  = option stack=32k debug all


#---------------------------------------------------------------------------
# Implicit rules
# Compiler:
# 	($< = full dependent with path)
# Assembler:
# 	output obj's are constructed from .obj: & the $& macro
# 	($< = full dependent with path)
# 	tasm's cfg file is not invoked as a response file.
#---------------------------------------------------------------------------

.c.obj:	.AUTODEPEND
	*$(C_CMD) $(CC_CFG) -fr=$(LIB_DIR)\OBJ\$^&.err -fo$(LIB_DIR)\OBJ\$^. $<

.cpp.obj: .AUTODEPEND
	*$(CPP_CMD) $(CC_CFG) -fr=$(LIB_DIR)\OBJ\$^&.err -fo$(LIB_DIR)\OBJ\$^. $<

.asm.obj:
	$(ASM_CMD) $(ASM_CFG) $<
	# hack cause TASM fails on paths..
	move /y $^. $(LIB_DIR)\OBJ\$^.
